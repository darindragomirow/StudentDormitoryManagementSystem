@using Syncfusion.EJ2;
@using Syncfusion.EJ2.BarcodeGenerator;
@using Syncfusion.EJ2.DropDowns

@{
    ViewBag.Title = "Generate QR code";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section ControlsSection{

    <h2 style="margin-top:100px; margin-left:88px;">Generate QR code</h2>
    <div class="col-lg-8 control-section" style="margin-top:20px;">
        <div class="content-wrapper" style="width: 100%;height: 590px;">
            <div class='center'>
                <div class='centercontrol' style="width: 200px;height: 150px">
                    @(Html.EJS().QRCodeGenerator("container").Width("200px").Height("150px").Value("URL").DisplayText(s => s.Visibility(false)).Invalid("invalidInput").Render() )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4 property-section" style="padding-right: 0px;padding-left: 18px;margin-top:30px;">
        <div class="property-panel-header">
            Appearance
        </div>
        <div id="propertypanel" class="e-remove-selection">
            <div class="property-section-content">
                <div class="row sb-child-row">
                    <div class="col-xs-2 top" style="padding-left: 0px;">
                        Value
                    </div>
                    <div class="col-xs-10" style="padding-left: 0px">
                        <form id="form-element" class="form-horizontal">
                            <div id='barcodevaluediv' name="password">
                                @(Html.EJS().TextBox("barcodeValue").Value("SYNCFUSION").Change("barcodeValueChange").Render() )
                            </div>
                        </form>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div>
                        <div class="col-xs-2 top" style="padding-left: 0px;padding-right: 20px;">
                            Width
                        </div>
                        <div class="col-xs-3" style="width: 33%;padding-left: 0px">
                            @(Html.EJS().NumericTextBox("barcodewidth").Value(200).Format("###.##").Enabled(true).Step(2).Min("150").Max(250).Change("barcodewidthChange").Render() )
                        </div>
                    </div>
                    <div>
                        <div class="rightProperty">
                            Height
                        </div>
                        <div class="col-xs-3" style="width: 33%;padding-left: 0px;">
                            @(Html.EJS().NumericTextBox("barcodeheight").Value(150).Format("###.##").Enabled(true).Step(2).Min(100).Max(250).Change("barcodeheightChange").Render() )
                        </div>
                    </div>
                </div>
                <div class="row sb-child-row" style="margin-top: 20px;">
                    <div class="col-xs-6" style="padding-left: 0px;">
                        <div class="col-xs-1" style="padding-left: 0px;">
                            @(Html.EJS().CheckBox("textVisibility").Checked(false).Change("textVisibilityChange").Render() )
                        </div>
                        <div class="col-xs-10">Text Visibility</div>
                    </div>
                    <div class="col-xs-4" style="padding-left: 0;margin-left: 13px;">
                        <div class="col-xs-1" style="padding-left: 0px;">
                            @(Html.EJS().CheckBox("svgMode").Checked(true).Change("svgModeChange").Render() )
                        </div>
                        <div class="svgTextClass">SVG Mode</div>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div style="margin-top: 15px">
                        <div class="col-xs-2" style="margin-top: 5px;padding-left: 0px;">BG Color</div>
                        <div class="col-xs-4" style="padding-left: 0px;">
                            @(Html.EJS().ColorPicker("bgColor").Value("#ffffff").Change("bgColorChange").Render() )
                            @*<ejs-colorpicker id='bgColor' value="#ffffff" change="bgColorChange"></ejs-colorpicker>*@
                        </div>
                        <div class="col-xs-2" style="width: 18%;padding-left: 12px;margin-top: 5px;">Fore Color</div>
                        <div class="col-xs-3" style="padding-left: 2px;">
                            @(Html.EJS().ColorPicker("foreColor").Value("#000000").Change("foreColorChange").Render() )
                        </div>
                    </div>
                </div>
                <div class="property-panel-header">
                    Margin
                </div>
                <div class="row sb-child-row">
                    <div class="col-xs-2 top" style="padding-left: 0px;"> Left</div>
                    <div class="col-xs-3" style="width: 33%;padding-left: 0px;">
                        @(Html.EJS().NumericTextBox("marginLeft").Value(10).Format("###.##").Enabled(true).Step(2).Min("-10").Max(30).Change("marginLeftChange").Render() )
                    </div>
                    <div class="rightProperty">Right</div>
                    <div class="col-xs-3" style="width: 33%;padding-left: 0px;">
                        @(Html.EJS().NumericTextBox("MarginRight").Value(10).Format("###.##").Enabled(true).Step(2).Min("-10").Max(30).Change("MarginRightChange").Render() )
                    </div>
                </div>

                <div class="row sb-child-row">
                    <div class="col-xs-2 top" style="padding-left: 0px;">Top</div>
                    <div class="col-xs-3" style="width: 33%;padding-left: 0px;">
                        <div style="padding-bottom: 8px">
                            @(Html.EJS().NumericTextBox("marginTop").Value(10).Format("###.##").Enabled(true).Step(2).Min("-10").Max(30).Change("marginTopChange").Render() )
                        </div>
                    </div>
                    <div class="rightProperty">Bottom</div>
                    <div class="col-xs-3" style="width: 33%;padding-left: 0px;">
                        @(Html.EJS().NumericTextBox("MarginBottom").Value(10).Format("###.##").Enabled(true).Step(2).Min("-10").Max(30).Change("MarginBottomChange").Render() )

                    </div>
                </div>
                <div class="row sb-child-row">
                    <div class="col-xs-2 top" style="padding-left: 0px;">Version</div>
                    <div class="col-xs-3" style="width: 33%;padding-left: 0px">
                        <div style="padding-bottom: 8px">
                            @(Html.EJS().NumericTextBox("version").Value(1).Format("###.##").Enabled(true).Step(2).Min("-10").Max(30).Change("VersionChange").Render() )
                            @*<ejs-dropdownlist id="level" dataSource="ViewBag.level" value="ViewBag.value" change="versionChange"></ejs-dropdownlist>*@
                        </div>
                    </div>
                </div>
                <div class="row sb-child-row">
                    <div class="col-xs-2 top" style="padding-left: 0px;">Error Correction Level</div>
                    <div class="col-xs-3" style="width: 33%;padding-left: 0px">
                        <div style="padding-bottom: 8px">
                            @*<input type="text" id='errorCorrection' />*@
                            @Html.EJS().DropDownList("correcrtion").Enabled(true).Index(0).DataSource(ViewBag.position).Change("correcrtionChange").Render()
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <style>
        #container {
            display: block
        }

        .column-style {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: calc((100% - 12px) / 3);
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .row-header {
            font-size: 15px;
            font-weight: 500;
        }

        .labelstyle {
            padding-top: 10px;
            float: left;
            padding-right: 10px
        }

        .propertystyle {
            padding-top: 22px;
            font-weight: 600;
            font-size: 15px;
        }

        .sb-child-row {
            margin-top: 8px;
        }

        .center {
            margin-left: 14px;
            margin-right: 17px;
            margin-top: 14px;
            min-width: 280px;
            width: auto;
            border: 2px solid lightgray;
            min-height: 40%;
            padding-top: 35px;
        }

        .col-lg-4-property-section {
            width: 36%;
        }

        .rightProperty {
            margin-top: 10px;
            width: 16.66666667%;
            float: left;
            position: relative;
            min-height: 1px;
            padding-right: 15px;
            padding-left: 15px;
        }

        .textProperty {
            width: 81%;
            padding-left: 0px;
            padding-right: 0;
            float: left;
            position: relative;
            min-height: 1px;
        }

        .sb-mobile-prop-pane .svgTextClass {
            width: 40px;
            padding-left: 24px;
        }

        .svgTextClass {
            width: 100px;
            float: left;
            position: relative;
            min-height: 1px;
            padding-right: 15px;
            padding-left: 15px;
        }



        .sb-mobile-prop-pane .rightProperty {
            padding-left: 2px;
        }

        .sb-mobile-prop-pane .textPropertyClass {
            padding-left: 30px;
        }

        .sb-mobile-prop-pane .textProperty {
            padding-left: 30px;
            width: 77%
        }

        .textPropertyClass {
            width: 83.33333333%;
            float: left;
            padding-left: 0px;
            position: relative;
            min-height: 1px;
            padding-right: 15px;
        }

        .allowedText {
            margin-left: 14px;
            margin-right: 17px;
            margin-top: 14px;
            width: auto;
            height: auto;
        }

        .errorMessage {
            margin-left: 14px;
            margin-right: 17px;
            margin-top: 14px;
            width: auto;
            height: auto;
        }

        .errorMessage {
            margin-left: 14px;
            margin-right: 17px;
            margin-top: 14px;
            width: auto;
            height: auto;
        }


        .top {
            margin-top: 10px;
        }

        .centercontrol {
            margin: auto;
            width: 50%;
            height: 50%;
        }

        #password-info {
            position: absolute;
            margin-top: 30px;
        }
    </style>

    <script type="text/javascript">
        function barcodeValueChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.value = args.value;
            var displayText = document.getElementById("displayText").ej2_instances[0];
            displayText.value = args.value;
        }
        let canShowError = false;
        var customFn = (args) => {
            if (canShowError) {
                return false;
            }
            return true;
        };



        function invalidInput() {
            var barcode = document.getElementById("container").ej2_instances[0];
            var displayText = document.getElementById("displayText").ej2_instances[0];
            var options = {

                rules: {
                    'password': { minLength: [customFn, 'Invalid input'] }
                },
                keyup() {
                    if (canShowError) {
                        canShowError = false;
                    }
                },
                focusout(args) {
                    displayText.value = barcode.value = (document.getElementById('barcodeValue')).value;
                    barcode.dataBind();
                },
            };
            var formObject = new ej.inputs.FormValidator('#form-element', options);
            canShowError = true;
            if (!barcode.displayText.text)
                formObject.validate();
        }
        function barcodewidthChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.width = args.value;
        }
        function barcodeheightChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.height = args.value;
        }
        function textVisibilityChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.visibility = args.checked;
        }
        function svgModeChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.mode = args.checked ? 'SVG' : 'Canvas';
        }
        function bgColorChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.backgroundColor = args.currentValue.hex
        }
        function foreColorChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.foreColor = args.currentValue.hex
        }
        function marginLeftChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.margin.left = args.value;
        }
        function MarginRightChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.margin.right = args.value;
        }
        function marginTopChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.margin.top = args.value;
        }
        function MarginBottomChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.margin.bottom = args.value;
        }

        function TextmarginTopChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.margin.top = args.value;
        }
        function VersionChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.version = args.value;

        }
        function TextMarginBottompChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.margin.bottom = args.value;
        }
        function expandChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.position = (args.value);
        }
        function alignChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.alignment = (args.value);
        }
        function displayTextChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.text = args.value;
        }
        function alignChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.displayText.alignment = (args.value);
        }
        function versionChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.version = (Number(args.value));
        }
        function correcrtionChange(args) {
            var barcode = document.getElementById("container").ej2_instances[0];
            barcode.errorCorrectionLevel = Number(args.itemData.value)
        }
    </script>
}




